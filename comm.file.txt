
>git clone project-name
>git clone https://github.com/amgo85/Git_Course.git

>git status 
to know the files that are not synced with repo

>git add .
all files got added to the stage

>git reset head file-name
or 
>git restore --staged filename
if u want to unstage some file after they've been added

>git commit -m "Created main project structure"
you are preparing to push to remote repo
but we are still in the local repo

>git branch
will tell u which branch are u in

>git remote -v

>git push RemoteRepoName branchName 

>git pull origin
fetch data & merge

git config -l  or  git config --list
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
core.editor=nano.exe
pull.rebase=false
credential.helper=manager
user.email=amgo85@gmail.com
user.name=Ahmad
init.defaultbranch=main
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
remote.origin.url=https://github.com/amgo85/Our-Project.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.main.remote=origin
branch.main.merge=refs/heads/main

>git config --global
to change the global configuration 
>git config --global user.email

>git config -l --show-origin
>git config --global --unset user.name
will remove the setting for user.name

>git config --global --edit

will allow to change setting using editor, inside editor you can type the below setting

[user]
        email = amgo85@gmail.com
        name = Ahmad
[init]
        defaultBranch = main

[color "status"]
        added = yellow
        changed = red bold
        untracked = magenta bold

[color "branch"]
        remote = yellow


[Arabic] Learn Git & GitHub #08 - Generate And Test Github Public Key

>ssh-keygen -t rsa -b 4096 -C "ahdmirghany@gmail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (C:\Users\HP/.ssh/id_rsa):
Created directory 'C:\Users\HP/.ssh'.
Enter passphrase (empty for no passphrase):524359059
Enter same passphrase again:524359059
Your identification has been saved in C:\Users\HP/.ssh/id_rsa.
Your public key has been saved in C:\Users\HP/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:iEPe0LmPmpfzKSpCHXdHkYwOeGpb2vFR67B0aT6g7Xc ahdmirghany@gmail.com
The key's randomart image is:
+---[RSA 4096]----+
|    .   o.o      |
|   . + o =       |
|    = = o o      |
|   * B X *       |
|  o @ @ S        |
| . + + * +       |
|.     o.. .      |
|. .  o=. o E     |
| . .+o ++ .      |
+----[SHA256]-----+

>ssh -T git@github.com

go where you want to 
>mkdir repos
>cd repos
\repos>git init
Initialized empty Git repository in C:/Users/HP/Documents/repos/.git/


>git config --global alias.st status
to set up an alias for status command
to view the aliased command type
>$ git config --global alias.st

>$ git config --global alias.br branch
>git config --global alias.cm "commit -m"

>git config --global --edit
                                          
[user]
        email = amgo85@gmail.com
        name = Ahmad
[init]
        defaultBranch = main

[color "status"]
        added = yellow
        changed = red bold
        untracked = magenta bold

[color "branch"]
        remote = yellow

[alias]
        st = status
        br = branch
        cm = commit -m




>git branch
* main

>git branch scroll
>git checkout scroll	to switch to that new branch

to delete the branch
>git branch -d scroll
>git checkout -b Dev-Feature	will create a branch and switch to it
>git branch -m Development 	will rename the branch you are in
create any file let say contact.html 
now you are in the Development branch

>git add contact.html
>git commit -m "creating contact.html & testing branch"

Now you have two options either pushing the changes as current branch & making pull request in Github 
Or merging changes with main branch using the following command after switching to main branch
>git branch main
>git merge Development

>git branch -m Development 	will delete the branch

>git checkout -b scroll
Switched to a new branch 'scroll'

>git status
On branch scroll
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        about-us.html


>git commit -m "new experiment"
[scroll f1ebb57] new experiment
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 about-us.html


>git branch -D scroll		with -D flag, it will delete the branch even though there is a commit not pushed
Deleted branch scroll (was f1ebb57).

& if you check now, the file about-us.html which was under scroll branch also got deleted

>git checkout -b scroll
Switched to a new branch 'scroll'


>git branch -d scroll		
Deleted branch scroll (was 80fe336).

with -d flag, it should not delete the branch if there is a commit not pushed but it has deleted already I don't know why
& the files which were created on the scroll branch are still there

>git checkout -b scroll
Switched to a new branch 'scroll'

>git add .

>git commit -m "testing branches"
[scroll cc8eb5d] testing branches
 2 files changed, 140 insertions(+), 17 deletions(-)
 create mode 100644 about-us.html


>echo "Hello World" > about_readme.txt
>git add *

now this file has been staged, prepared for commit & push
Assuming that the work on this file is incomplete, we can use the stash command to hide it 
It will not appear in git status command nor in the ls command

>git stash
>git stash pop		will show your hidden files

On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   about_readme.txt
        new file:   courses.html

Dropped refs/stash@{0} (f85b91d22fa8fa507197834bd8b022668a60ec8b)


now if you want to confirm the stash is empty you can type 
>git stash list

>echo > m.txt
>ls
about_readme.txt  about-us.html  Added-After-Commit.rar  ahmed.zip  comm.file  contact.html  courses.html  css/  imgs/  index.html  js/  m.txt  README.md
>git add m.txt
warning: LF will be replaced by CRLF in m.txt.
The file will have its original line endings in your working directory

>git stash
Saved working directory and index state WIP on main: 4f326d0 added files from stash

>git stash list
stash@{0}: WIP on main: 4f326d0 added files from stash

now if 

>echo > m.txt
>git stash
Saved working directory and index state WIP on main: 4f326d0 added files from stash

>echo > osx.txt

HP@AHMED-LP MINGW64 ~/Documents/Github/Git_Course (main)
>git add osx.txt
warning: LF will be replaced by CRLF in osx.txt.
The file will have its original line endings in your working directory

HP@AHMED-LP MINGW64 ~/Documents/Github/Git_Course (main)
>git stash save "OSX FILE"
Saved working directory and index state On main: OSX FILE


stash apply is different to stash pop in that it will still keep the file in the stash, where as pop it will remove file


$ git stash apply
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   osx.txt


HP@AHMED-LP MINGW64 ~/Documents/Github/Git_Course (main)
$ git commit "osx test"
error: pathspec 'osx test' did not match any file(s) known to git

HP@AHMED-LP MINGW64 ~/Documents/Github/Git_Course (main)
$ git commit -m "osx test"
[main 7de2949] osx test
 1 file changed, 1 insertion(+)
 create mode 100644 osx.txt

HP@AHMED-LP MINGW64 ~/Documents/Github/Git_Course (main)
$ git push origin main
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 8 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 257 bytes | 257.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/amgo85/Git_Course.git
   4f326d0..7de2949  main -> main

HP@AHMED-LP MINGW64 ~/Documents/Github/Git_Course (main)
$ git stash list
stash@{0}: On main: OSX FILE
stash@{1}: WIP on main: 4f326d0 added files from stash
stash@{2}: WIP on main: 4f326d0 added files from stash


You may have noticed that both pop & apply access the stash from top in LIFO order
So if you want to access one specific file in the stash, you need to use its id 
>git stash pop stash@{2}
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   m.txt

Dropped stash@{2} (5474972ea62358d8ac3e967bde45f67e33c99221)


>git commit -m "Accessed specific file in the stash using ID"
[main 14cc960] Accessed specific file in the stash using ID
 1 file changed, 1 insertion(+)
 create mode 100644 m.txt

if you wish to drop  a file from the stash
	git stash drop 
	git stash drop stash@{1}

the difference in the two commands is that the first will work in the last saved file

>git stash drop stash@{1}
Dropped stash@{1} (1b844402bbebe3087e1cc170823d11c99709a90f)

notice that the file got deleted completely, you have no access to it after using drop

>git stash show
 osx.txt | 1 +
 1 file changed, 1 insertion(+)



>echo > elz.docx

HP@AHMED-LP MINGW64 ~/Documents/Github/Git_Course (main)
>git add elz.docx
warning: LF will be replaced by CRLF in elz.docx.
The file will have its original line endings in your working directory

HP@AHMED-LP MINGW64 ~/Documents/Github/Git_Course (main)
>git stash
Saved working directory and index state WIP on main: 14cc960 Accessed specific file in the stash using ID

HP@AHMED-LP MINGW64 ~/Documents/Github/Git_Course (main)
>git stash show
 elz.docx | 1 +
 1 file changed, 1 insertion(+)

HP@AHMED-LP MINGW64 ~/Documents/Github/Git_Course (main)
>git stash show stash@{0}
 elz.docx | 1 +
 1 file changed, 1 insertion(+)

>git stash clear
will clear everything you cannot retain

>git clean -f

>git log 		will show u the detailed commit log

now if you want to uncommit something you have to type the below command

>git reset --hard d545774937b34091a11e6c809d4041d2bf74e06c
the hashcode of any commit is found in the git log 

HEAD is now at d545774 bad file commit

after this we need to update the remote repository
using

>git push origin main --force
Everything up-to-date

.gitignore file will ignore any file or folder written inside


>echo "*.log" > .gitignore
>echo > project.log



> git add project.log
The following paths are ignored by one of your .gitignore files:
project.log
hint: Use -f if you really want to add them.
hint: Turn this message off by running
hint: "git config advice.addIgnoredFile false"

HP@AHMED-LP MINGW64 ~/Documents/Github/Git_Course (main)
> git add -f project.log
warning: LF will be replaced by CRLF in project.log.
The file will have its original line endings in your working directory

HP@AHMED-LP MINGW64 ~/Documents/Github/Git_Course (main)
> git commit -m "Forcing commit against the .gitignore"

[main 6eb2cf9] Forcing commit against the .gitignore
 1 file changed, 1 insertion(+)
 create mode 100644 project.log

HP@AHMED-LP MINGW64 ~/Documents/Github/Git_Course (main)
$ git push origin main
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Delta compression using up to 8 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (2/2), 255 bytes | 255.00 KiB/s, done.
Total 2 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/amgo85/Git_Course.git
   d545774..6eb2cf9  main -> main



>git tag v1.0
>git push origin main v1.0

> git tag -a v2.0 -m "Second Version"
	to create annotated tag
>git push origin v2.0


>git tag -l "v1.*"
v1.0

>git tag -d v1.0
>git push origin --delete v2.0


